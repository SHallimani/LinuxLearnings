I find its very important that we are clear about the part of Linux we are discussing this topic - Kernel Space or User Space

i) Scope â€“ The scope of mutex is within a process address space which has created it and is used for synchronization of common resource access.
            Whereas semaphore can be used across processes space and hence it can be used for interprocess synchronization/signaling.
            Hence mutex must be released by same thread which is taking it.
ii) Mutex is lightweight and faster than semaphore (only valid for userspace)
iii) Mutex can be acquired by same thread successfully multiple times with condition that it should release it same number of times.
    Other thread trying to acquire will block. Whereas in case of semaphore if same process tries to acquire it again it blocks as it can be acquired only once.

Mutex:
The mutex subsystem checks and enforces the following rules:

    - Only one task can hold the mutex at a time.
    - Only the owner can unlock the mutex.
    - Multiple unlocks are not permitted.
    - Recursive locking/unlocking is not permitted.
    - A mutex must only be initialized via the API (see below).
    - A task may not exit with a mutex held.
    - Memory areas where held locks reside must not be freed.
    - Held mutexes must not be reinitialized.
    - Mutexes may not be used in hardware or software interrupt
      contexts such as tasklets and timers.

These semantics are fully enforced when CONFIG DEBUG_MUTEXES is enabled.
In addition, the mutex debugging code also implements a number of other
features that make lock debugging easier and faster:

    - Uses symbolic names of mutexes, whenever they are printed
      in debug output.
    - Point-of-acquire tracking, symbolic lookup of function names,
      list of all locks held in the system, printout of them.
    - Owner tracking.
    - Detects self-recursing locks and prints out all relevant info.
    - Detects multi-task circular deadlocks and prints out all affected
      locks and tasks (and only those tasks).

Semaphore:
SpinLock:
